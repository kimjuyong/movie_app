{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","className","poster","this","props","alt","title","genres","map","genre","index","MovieGenre","key","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","MoviePoster","src","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAKMA,G,uLAUE,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,OAAQG,IAAKF,KAAKC,MAAME,SAE5D,yBAAKL,UAAU,kBACX,4BAAKE,KAAKC,MAAME,OAChB,yBAAKL,UAAU,iBACVE,KAAKC,MAAMG,OAAOC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAACC,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,QAE3E,uBAAGT,UAAU,mBACT,kBAAC,IAAD,CACIY,KAAMV,KAAKC,MAAMU,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,mB,GA1BhBC,cAoCdC,E,iLAOE,OACI,yBAAKC,IAAKlB,KAAKC,MAAMF,OAAQG,IAAKF,KAAKC,MAAMC,IAAKC,MAAOH,KAAKC,MAAMC,IAAKJ,UAAU,sB,GARrEkB,aAa1B,SAASR,EAAT,GAA6B,IAARF,EAAO,EAAPA,MACjB,OACI,0BAAMR,UAAU,gBAAgBQ,GAQzBT,QCXAsB,E,2MA7CbC,MAAM,G,EAMNC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOjB,KAAI,SAAAkB,GAEnC,OADAC,QAAQC,IAAIF,GACL,kBAAC,EAAD,CACPpB,MAAOoB,EAAMG,cACX3B,OAAQwB,EAAMI,mBAChBlB,IAAKc,EAAMK,GACXxB,OAAQmB,EAAMnB,OACdO,SAAUY,EAAMZ,e,EAMtBkB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,2C,EAObS,SAAW,WACP,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,mFA5B1BvC,KAAK6B,e,+BA+BE,IACCP,EAAWtB,KAAKoB,MAAhBE,OACR,OACE,yBAAKxB,UAAWwB,EAAS,MAAQ,gBAC9BtB,KAAKoB,MAAME,OAAStB,KAAKqB,gBAAiB,e,GAzCjCL,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.4aca7666.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component{\r\n\r\nstatic propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Columns\">\r\n                    <MoviePoster poster={this.props.poster} alt={this.props.title} />    \r\n                </div>\r\n                <div className=\"Moive__Columns\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre,index) => <MovieGenre genre={genre} key={index} />)}\r\n                    </div>\r\n                    <p className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis\r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis='...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />   \r\n                    </p>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n    \r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired,\r\n        alt: PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt={this.props.alt} title={this.props.alt} className=\"Movie__Poster\"/>\r\n        )\r\n    }\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\n\n\nclass App extends Component {\n\n \n  state={}\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie \n      title={movie.title_english} \n        poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n_getMovies = async () => {\n  const movies = await this._callApi()\n  this.setState({\n    movies\n  })\n}\n\n_callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n}\n\n  render(){\n    const { movies } = this.state;\n    return(\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies(): 'loading'}\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}